{"ast":null,"code":"import Card from './Card';\n/*\r\n    This class represent object Deck of card.\r\n* */\n\nexport default class Deck {\n  constructor(cards = new Card().formCards()) {\n    this.numberOfCards = () => this.cards.length;\n\n    this.shuffleCards = () => {\n      for (let index = this.numberOfCards() - 1; index > 0; index--) {\n        const newIndex = Math.floor(Math.random() * (index + 1));\n        const oldValue = this.cards[newIndex];\n        this.cards[newIndex] = this.cards[index];\n        this.cards[index] = oldValue;\n      }\n    };\n\n    this.cards = cards;\n  }\n\n  // return a card wich is on top\n  pop() {\n    return this.cards.shift();\n  }\n\n}","map":{"version":3,"sources":["/Users/john/Desktop/WebProjects/deck-card/src/models/Deck.js"],"names":["Card","Deck","constructor","cards","formCards","numberOfCards","length","shuffleCards","index","newIndex","Math","floor","random","oldValue","pop","shift"],"mappings":"AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,IAAN,CAAU;AACrBC,EAAAA,WAAW,CAACC,KAAK,GAAG,IAAIH,IAAJ,GAAWI,SAAX,EAAT,EAAiC;AAAA,SAG5CC,aAH4C,GAG5B,MAAM,KAAKF,KAAL,CAAWG,MAHW;;AAAA,SAK5CC,YAL4C,GAK7B,MAAM;AACjB,WAAI,IAAIC,KAAK,GAAG,KAAKH,aAAL,KAAqB,CAArC,EAAwCG,KAAK,GAAG,CAAhD,EAAmDA,KAAK,EAAxD,EAA2D;AACvD,cAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,KAAK,GAAC,CAAvB,CAAX,CAAjB;AACA,cAAOK,QAAQ,GAAG,KAAKV,KAAL,CAAWM,QAAX,CAAlB;AACA,aAAKN,KAAL,CAAWM,QAAX,IAAuB,KAAKN,KAAL,CAAWK,KAAX,CAAvB;AACA,aAAKL,KAAL,CAAWK,KAAX,IAAmBK,QAAnB;AACH;AACJ,KAZ2C;;AACxC,SAAKV,KAAL,GAAaA,KAAb;AACH;;AAWD;AACAW,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKX,KAAL,CAAWY,KAAX,EAAP;AACH;;AAjBoB","sourcesContent":["\r\nimport Card from './Card';\r\n/*\r\n    This class represent object Deck of card.\r\n* */\r\n\r\nexport default class Deck{\r\n    constructor(cards = new Card().formCards()) {\r\n        this.cards = cards;\r\n    }\r\n    numberOfCards = () => this.cards.length;\r\n    // shuffle cards\r\n    shuffleCards = () => {\r\n        for(let index = this.numberOfCards()-1; index > 0; index--){\r\n            const newIndex = Math.floor(Math.random() * (index+1));\r\n            const  oldValue = this.cards[newIndex];\r\n            this.cards[newIndex] = this.cards[index];\r\n            this.cards[index]= oldValue;\r\n        }\r\n    }\r\n    // return a card wich is on top\r\n    pop() {\r\n        return this.cards.shift()\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}