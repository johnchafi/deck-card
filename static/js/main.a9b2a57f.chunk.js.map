{"version":3,"sources":["models/card.js","models/deck.js","dispatcher/dispatcher.js","store/store.js","components/deck/DeckView.js","actions/actions.js","components/App.js","reportWebVitals.js","index.js"],"names":["SUITS","VALUE","Card","suit","value","this","flatMap","map","Deck","cards","formCards","numberOfCards","length","shuffleCards","index","newIndex","Math","floor","random","oldValue","shift","Dispatcher","deckStore","deck","deckCard","card","getAll","emit","pop","action","type","startGame","playCard","shuffleDeck","EventEmitter","dispatcher","register","handleActions","bind","DeckView","props","state","displayCards","displayCard","selectCard","store","on","setState","undefined","off","cardSize","dispatch","alert","window","location","reload","hideShowDeck","hideShowCard","cardColor","className","href","style","marginRight","onClick","height","fontSize","color","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b2a57f.chunk.js","sourcesContent":["\r\nconst SUITS = [\"♠\",\"♥\", \"♦\" , \"♣\"];\r\nconst VALUE = [\"A\",\"2\", \"3\" , \"4\",\"5\",\"6\", \"7\" , \"8\",\"9\",\"10\", \"J\" , \"Q\", \"k\"];\r\n\r\n/*\r\n    This class represent object card.\r\n* */\r\nexport default class Card{\r\n    constructor(suit, value) {\r\n        this.suit = suit;\r\n        this.value = value;\r\n    };\r\n    formCards() {\r\n        return SUITS.flatMap(suit =>{\r\n            return VALUE.map(value => {\r\n                return new Card(suit, value);\r\n            })\r\n        })\r\n    };\r\n}\r\n","\r\nimport Card from './card';\r\n/*\r\n    This class represent object Deck of card.\r\n* */\r\n\r\nexport default class Deck{\r\n    constructor(cards = new Card().formCards()) {\r\n        this.cards = cards;\r\n    }\r\n    numberOfCards = () => this.cards.length;\r\n    // shuffle cards\r\n    shuffleCards = () => {\r\n        for(let index = this.numberOfCards()-1; index > 0; index--){\r\n            const newIndex = Math.floor(Math.random() * (index+1));\r\n            const  oldValue = this.cards[newIndex];\r\n            this.cards[newIndex] = this.cards[index];\r\n            this.cards[index]= oldValue;\r\n        }\r\n    }\r\n    // return first card\r\n    pop() {\r\n        return this.cards.shift()\r\n    }\r\n\r\n}\r\n","import {Dispatcher} from \"flux\";\r\nexport  default new Dispatcher();","import {EventEmitter} from \"events\";\r\nimport Deck from '../models/deck';\r\nimport dispatcher from \"../dispatcher/dispatcher\";\r\n\r\nclass DeckStore extends EventEmitter{\r\n    constructor(deck = new Deck()) {\r\n        super();\r\n        this.deckCard = deck;\r\n        this.card = null;\r\n    }\r\n    startGame(){\r\n        this.getAll();\r\n        this.emit(\"start\");\r\n    }\r\n    playCard(){\r\n        this.card = this.deckCard.pop();\r\n        this.emit(\"dealOneCard\");\r\n    }\r\n    shuffleDeck(){\r\n        this.card = this.deckCard.shuffleCards();\r\n    }\r\n    getAll(){\r\n        return this.deckCard.cards;\r\n    }\r\n    /*\r\n    This methode handle actions.\r\n    */\r\n    handleActions(action){\r\n        switch (action.type){\r\n            case \"START-GAME\":{\r\n                this.startGame();\r\n                break;\r\n            }\r\n            case \"PLAY-CARD\":{\r\n                this.playCard();\r\n                this.startGame();\r\n                break;\r\n            }\r\n            case \"SHUFFLE\":{\r\n                this.shuffleDeck();\r\n                break;\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\nconst deckStore = new DeckStore();\r\ndispatcher.register(deckStore.handleActions.bind(deckStore));\r\nexport default deckStore;\r\n","import React, {Component} from \"react\"\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\nimport store from \"../../store/store\";\r\nimport * as  action from \"../../actions/actions\"\r\nimport './Deck.css';\r\n\r\n\r\nclass DeckView extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            deckCard : [],\r\n            displayCards : false,\r\n            displayCard : false,\r\n            card : {\r\n                suit : \"\",\r\n                value : \"\"\r\n            }\r\n        };\r\n        this.selectCard= this.selectCard.bind(this);\r\n        this.displayCards=this.displayCards.bind(this);\r\n        this.shuffleDeck=this.shuffleDeck.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        store.on(\"start\", () => {\r\n            this.setState({\r\n                deckCard: store.getAll(),\r\n                displayCards : true\r\n            });\r\n        })\r\n        store.on(\"dealOneCard\", () => {\r\n            if(store.card !== undefined){\r\n                this.setState({\r\n                        card:store.card,\r\n                        displayCard :true\r\n                    });\r\n            }\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        store.off(\"start\", () => {\r\n            this.setState({\r\n                deckCard: store.getAll(),\r\n                displayCards : true\r\n            });\r\n        })\r\n        store.off(\"dealOneCard\", () => {\r\n            if(store.card !== undefined){\r\n                this.setState({\r\n                    card:store.card,\r\n                    displayCard :true\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    cardSize(){\r\n        return this.state.deckCard.length;\r\n    }\r\n    displayCards(){\r\n        if(this.cardSize() === 0) {\r\n            action.startGame();\r\n        }\r\n    }\r\n    selectCard(){\r\n        if(this.cardSize() === 0){\r\n            alert(\"First you have to diplay the cards!\");\r\n            window.location.reload(false);\r\n        }\r\n        else action.playCard();\r\n    }\r\n    shuffleDeck(){\r\n        if(this.cardSize() === 0) alert(\"First you have to diplay the cards!\");\r\n        else action.shuffleDeck();\r\n    }\r\n    render(){\r\n        let hideShowDeck = this.state.displayCards;\r\n        let hideShowCard = this.state.displayCard;\r\n        let value =  this.state.card.value;\r\n        let suit =  this.state.card.suit;\r\n        let cardColor = suit === \"♠\" || suit === \"♣\" ? \"black\" : \"red\";\r\n        return(\r\n            <div>\r\n                <nav className=\"card light-blue darken-3\">\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#!\" className=\"brand-logo center\">CARD GAME</a>\r\n                    </div>\r\n                </nav>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s12\">\r\n                                <div className=\"card light-blue darken-3 \">\r\n                                    <div className=\"card-content white-text\">\r\n                                        <span className=\"card-title\">Deck of Cards</span>\r\n                                        <p>Game rules, Before you shuffle the cards or select a card you have first of all to display the cards</p>\r\n                                    </div>\r\n                                    <div className=\"card-action\">\r\n                                        <button  style={{marginRight : 20}} className=\"waves-effect  waves-light btn-small\" onClick={this.displayCards}>Display</button>\r\n                                        <button  style={{marginRight : 20}} className=\"waves-effect waves-light btn-small\" onClick={this.shuffleDeck}>Shuffle</button>\r\n                                        <button  style={{marginRight : 20}} className=\"waves-effect waves-light btn-small\" onClick={this.selectCard}>Select Card</button>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        { hideShowDeck &&(\r\n                                            <div className=\"col s12 m6\">\r\n                                                <div style={{height : 250}} className=\"card-panel teal z-depth-4\">\r\n                                                    <div style={{fontSize : 100}}>{this.cardSize()}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                        { hideShowCard &&(\r\n                                            <div className=\"col s12 m6\">\r\n                                                <div style={{height : 250}} className=\"card-panel white\">\r\n                                                    <div className=\"left\">\r\n                                                        <div style={{color : cardColor}}>{value}</div>\r\n                                                        <div style={{color : cardColor}}>{suit}</div>\r\n                                                    </div>\r\n                                                    <div style={{fontSize : 100, color : cardColor}} className=\"center-block\">{suit}</div>\r\n                                                    <div className=\"right\">\r\n                                                        <div style={{color : cardColor}}>{value}</div>\r\n                                                        <div style={{color : cardColor}} className=\"rotate\">{suit}</div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default DeckView;\r\n","import dispatcher from \"../dispatcher/dispatcher\";\r\n\r\nexport let startGame = () => {\r\n    dispatcher.dispatch({\r\n        type : \"START-GAME\"\r\n    });\r\n}\r\nexport let shuffleDeck = () => {\r\n    dispatcher.dispatch({\r\n        type : \"SHUFFLE\"\r\n    });\r\n}\r\nexport let playCard = () => {\r\n    dispatcher.dispatch({\r\n        type : \"PLAY-CARD\"\r\n    });\r\n}\r\n","\nimport './App.css';\nimport DeckView from \"./deck/DeckView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DeckView></DeckView>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}